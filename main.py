import os
import time
import requests
import tweepy
from openai import BadRequestError, OpenAI
from typing import Optional
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_message
from generate_prompt import generate_image_prompt


def setup_twitter_clients():
    # Twitter API v1認証（メディアアップロード用）
    auth = tweepy.OAuthHandler(
        os.getenv("TWITTER_API_KEY"),
        os.getenv("TWITTER_API_SECRET")
    )
    auth.set_access_token(
        os.getenv("TWITTER_ACCESS_TOKEN"),
        os.getenv("TWITTER_ACCESS_TOKEN_SECRET")
    )
    api_v1 = tweepy.API(auth)

    # Twitter API v2認証（ツイート投稿用）
    client_v2 = tweepy.Client(
        consumer_key=os.getenv("TWITTER_API_KEY"),
        consumer_secret=os.getenv("TWITTER_API_SECRET"),
        access_token=os.getenv("TWITTER_ACCESS_TOKEN"),
        access_token_secret=os.getenv("TWITTER_ACCESS_TOKEN_SECRET")
    )

    return api_v1, client_v2


def is_retriable_error(exception: Exception) -> bool:
    """リトライ可能なエラーかどうかを判定する"""
    if isinstance(exception, BadRequestError):
        error_data = exception.error

        # content_policy_violationを含むリトライ可能なエラーコード
        retriable_codes = [
            'rate_limit_exceeded',
            'server_error',
            'content_policy_violation'  # コンテンツポリシー違反もリトライ対象に追加
        ]
        return error_data.get('code') in retriable_codes
    return False

@retry(
    retry=retry_if_exception_message(is_retriable_error),
    stop=stop_after_attempt(3),
    wait=wait_exponential(multiplier=1, min=4, max=10),
    reraise=True
)


def request_image_generation(client: OpenAI, prompt: str) -> dict:
    """
    OpenAI APIを使用して画像を生成する
    
    Args:
        client: OpenAIクライアント
        prompt: 画像生成のプロンプト
    
    Returns:
        生成された画像の情報を含む辞書
    """
    return client.images.generate(
        model="dall-e-3",
        prompt=prompt,
        size="1024x1024",
        quality="standard",
        n=1
    )


def download_image(url: str, save_path: str, max_retries: int = 3) -> None:
    """
    指定されたURLから画像をダウンロードする
    
    Args:
        url: ダウンロードする画像のURL
        save_path: 保存先のパス
        max_retries: 最大リトライ回数
    
    Raises:
        requests.RequestException: ダウンロードに失敗した場合
    """
    for attempt in range(max_retries):
        try:
            response = requests.get(url)
            response.raise_for_status()
            with open(save_path, "wb") as f:
                f.write(response.content)
            return
        except requests.RequestException as e:
            if attempt == max_retries - 1:
                raise
            time.sleep(2 ** attempt)


def generate_and_post_image(prompt: str, tweet_text: str) -> Optional[str]:
    """
    画像を生成してTwitterに投稿する
    
    Args:
        prompt: 画像生成のプロンプト
        tweet_text: ツイートのテキスト
    
    Returns:
        投稿されたツイートのID、エラーの場合はNone
    """
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    temp_image = "temp_image.png"

    try:
        # 画像生成（リトライ込み）
        try:
            response = request_image_generation(client, prompt)
        except BadRequestError as e:
            print(f"画像生成エラー（3回リトライ後）: {str(e)}")
            return None
        except Exception as e:
            print(f"予期せぬエラーが発生しました: {str(e)}")
            return None

        # 画像ダウンロード
        try:
            image_url = response.data[0].url
            download_image(image_url, temp_image)
        except requests.RequestException as e:
            print(f"画像ダウンロードエラー: {str(e)}")
            return None

        # Twitter APIクライアント取得
        api_v1, client_v2 = setup_twitter_clients()

        # 画像アップロード（v1 API）
        media = api_v1.media_upload(temp_image)

        # ツイート投稿（v2 API）
        tweet = client_v2.create_tweet(text=tweet_text, media_ids=[media.media_id])

        os.remove(temp_image)
        print("ツイートを投稿しました")
        return tweet.data['id']

    except Exception as e:
        print(f"エラーが発生しました: {str(e)}")
        return None

    finally:
        if os.path.exists(temp_image):
            os.remove(temp_image)

if __name__ == "__main__":
    # 環境変数の設定(デバッグ用)
    # os.environ["OPENAI_API_KEY"] = ""
    # os.environ["TWITTER_API_KEY"] = ""
    # os.environ["TWITTER_API_SECRET"] = ""
    # os.environ["TWITTER_ACCESS_TOKEN"] = ""
    # os.environ["TWITTER_ACCESS_TOKEN_SECRET"] = ""

    # 画像生成と投稿
    prompt = generate_image_prompt(
        art_style="日本のアニメイラストのような繊細で多彩な色彩の二次元イラスト",
        hair="美しい銀髪、波打つセミロング",
        pose="ピンクのリボンで装飾された、30cmぐらいの大きなハート型のチョコレートを胸の前で両手で持っている",
        gaze="カメラ目線",
        composition="背景には服装と似たような幻想的な模様が描かれており、バレンタインデーのような雰囲気を醸成している",
        clothing="黒を基調とした、フリル多めのゴシックロリータスタイル",
        scene="少し頬を赤らめながらこちらに微笑みかけている"
    )
    tweet_text = "Generated By #DALLE3 #AI #AIart #AIイラスト #銀髪\n#バレンタイン #ValentinesDay"
    generate_and_post_image(prompt, tweet_text)